#!usr/bin/env python  
# -*- coding:utf-8 -*-
""" 
@author:user 
@file: tools.py 
@time: 2017/11/08 
"""

import platform
import os
from selenium import webdriver
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.by import By
import configparser
from com.ea.common.logger import logger
import datetime
from xlutils.copy import copy
import xlrd

platatt = platform.system()
conf = configparser.ConfigParser()
config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), 'resource')
conf.read(config_path + "/config.ini")


def getdriver():
    if platatt == 'Darwin':
        # chromeoptions = webdriver.ChromeOptions()
        # chromeoptions.add_argument("--kiosk")
        # 实例化一个Chrome浏览器
        driver = webdriver.Chrome()
        driver.set_window_size(1180, 1000)
    elif platatt == "Windows":
        chromeoptions = webdriver.ChromeOptions()
        chromeoptions.add_argument("--start-maximized")
        # 实例化一个Chrome浏览器
        driver = webdriver.Chrome(chrome_options=chromeoptions)
    else:
        logger.info("This platform is not Mac and Windows!! Please check!!")
        raise Exception
    # 隐式设置等待时间为3秒
    driver.implicitly_wait(3)
    # 显示设置等待时间为20秒，每0.5秒循环一次
    wait = WebDriverWait(driver, 10, 0.5)
    return driver, wait


def get_chrome_driver():
    try:
        if platatt == 'Darwin':
            # chromeoptions = webdriver.ChromeOptions()
            # chromeoptions.add_argument("--kiosk")
            # 实例化一个Chrome浏览器
            driver = webdriver.Chrome()
            driver.set_window_size(1180, 1000)
        elif platatt == "Windows":
            chromeoptions = webdriver.ChromeOptions()
            chromeoptions.add_argument("--start-maximized")
            # 实例化一个Chrome浏览器
            driver = webdriver.Chrome(chrome_options=chromeoptions)
        else:
            logger.info("This platform is not Mac and Windows!! Please check!!")
            raise Exception
        # 隐式设置等待时间为3秒
        driver.implicitly_wait(10)
        # 显示设置等待时间为20秒，每0.5秒循环一次
        return driver
    except Exception as e:
        raise e


def login(driver, wait, username="jun.lu"):
    url = conf.get("login", "url")
    # username = conf.get("login", "username")
    # 打开wequant主页
    driver.get(url)
    # 输入用户名
    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "input[name='user']")))
    user = driver.find_element_by_css_selector("input[name='user']")
    user.clear()
    user.send_keys(username)
    # 点击登录界面上的登录按钮
    driver.find_element_by_css_selector("input[type='submit']").click()
    wait.until(EC.invisibility_of_element_located((By.XPATH, "//a[text()='客户管理'")))
    print("登录成功")


def page_down(driver):
    # 拉动滚动条到最后
    js = "var q=document.documentElement.scrollTop=1000000"
    driver.execute_script(js)


def get_current_time():
    shottime = str(datetime.datetime.strftime(datetime.datetime.now(), '%Y-%m-%d-%H-%M-%S'))
    return shottime


def get_screenshot(driver, screenshot_path, casename):
    shottime = get_current_time()
    picname = screenshot_path + "\\" + shottime + casename + ".png"
    driver.get_screenshot_as_file(picname)
    print("运行失败,请查看图片:" + picname)


def create_huankuanjihua(fullname):
    u"""修改还款计划表中的名字"""
    filename = config_path + '\\hk_plan.xls'
    rb = xlrd.open_workbook(filename)
    w = copy(rb)
    w.get_sheet(0).write(1, 3, fullname)
    w.save(filename)


def del_pics(screenshot_path):
    u"""删除用例的截图目录下所有的截图文件"""
    # files = os.listdir(screenshot_path)
    # print(files)
    # for file in files:
    #     os.remove(screenshot_path + "\\" + file)
    import glob
    ext = os.path.join(screenshot_path, "*.png")
    files = glob.glob(ext)
    for file in files:
        os.remove(file)
